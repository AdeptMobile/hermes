"use strict";(self.webpackChunkhermes_website=self.webpackChunkhermes_website||[]).push([[892],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return p}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),d=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=d(e.components);return a.createElement(l.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=d(n),h=r,p=u["".concat(l,".").concat(h)]||u[h]||m[h]||i;return n?a.createElement(p,o(o({ref:t},c),{},{components:n})):a.createElement(p,o({ref:t},c))}));function p(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:r,o[1]=s;for(var d=2;d<i;d++)o[d]=n[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},7569:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return l},default:function(){return p},frontMatter:function(){return s},metadata:function(){return d},toc:function(){return u}});var a=n(3117),r=n(102),i=(n(7294),n(3905)),o=["components"],s={id:"coding-standards",title:"Coding Standards"},l=void 0,d={unversionedId:"coding-standards",id:"coding-standards",title:"Coding Standards",description:"Hermes Coding Standards",source:"@site/../doc/CodingStandards.md",sourceDirName:".",slug:"/coding-standards",permalink:"/docs/coding-standards",draft:!1,editUrl:"https://github.com/facebook/hermes/blob/HEAD/website/../doc/CodingStandards.md",tags:[],version:"current",lastUpdatedAt:1684959308,formattedLastUpdatedAt:"May 24, 2023",frontMatter:{id:"coding-standards",title:"Coding Standards"},sidebar:"docs",previous:{title:"React Native Integration",permalink:"/docs/react-native-integration"}},c={},u=[{value:"Hermes Coding Standards",id:"hermes-coding-standards",level:2},{value:"Code Quality",id:"code-quality",level:3},{value:"Language Features",id:"language-features",level:3},{value:"Code Style",id:"code-style",level:3},{value:"Small incremental changes",id:"small-incremental-changes",level:3},{value:"Add tests",id:"add-tests",level:3},{value:"Format your code",id:"format-your-code",level:3},{value:"Commit messages",id:"commit-messages",level:3},{value:"Code review",id:"code-review",level:3}],m={toc:u},h="wrapper";function p(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)(h,(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"hermes-coding-standards"},"Hermes Coding Standards"),(0,i.kt)("p",null,"This document provides guidance for the kind of code that should go in to\nthe Hermes project. The rules in this document will allow us to scale the\nproject and ensure that the code base remains readable and maintainable."),(0,i.kt)("h3",{id:"code-quality"},"Code Quality"),(0,i.kt)("p",null,"Code quality standards in Hermes are very strict. While we welcome and\nsupport community contributions, expect scrutiny on changes that do not\nmeet the following standards:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Contributions must be well understood and explained in PRs. We cannot accept\nand maintain contributions that we don't fully understand."),(0,i.kt)("li",{parentName:"ul"},"Contributions should not use shortcuts or hacks in the name of expediency.\nHermes is a critical piece of infrastructure for many apps and systems, and\nsuch code creates ongoing work for maintainers.")),(0,i.kt)("h3",{id:"language-features"},"Language Features"),(0,i.kt)("p",null,"Hermes uses C++14."),(0,i.kt)("p",null,"Exceptions or RTTI are prohibited, except where needed for\ninterfacing with other software that requires them."),(0,i.kt)("p",null,"GCC language extensions are discouraged for compatibility with MSVC, or they\nshould be conditionally enabled."),(0,i.kt)("h3",{id:"code-style"},"Code Style"),(0,i.kt)("p",null,"TODO: This should be sorted and expanded."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Every declaration must have a doc-comment.")),(0,i.kt)("p",null,"Naming"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},'Member variables use a "',"_",'" suffix unless they are public, where it is\nacceptable to omit the suffix.'),(0,i.kt)("li",{parentName:"ul"},"Classes use pascal case (",(0,i.kt)("inlineCode",{parentName:"li"},"MyClass"),")."),(0,i.kt)("li",{parentName:"ul"},"Functions and methods use camel case (",(0,i.kt)("inlineCode",{parentName:"li"},"myFunc"),")."),(0,i.kt)("li",{parentName:"ul"},"Variables generally use camel case (",(0,i.kt)("inlineCode",{parentName:"li"},"myVar"),'). We also allow "abbreviated\ncase": "basic block" can be abbreviated as ',(0,i.kt)("inlineCode",{parentName:"li"},"BB"),', "instruction" can be\nabbreviated as ',(0,i.kt)("inlineCode",{parentName:"li"},"I"),", etc."),(0,i.kt)("li",{parentName:"ul"},"Constants use either capitalized snake case (",(0,i.kt)("inlineCode",{parentName:"li"},"MY_CONST"),') or camel case with\n"k" prefix (',(0,i.kt)("inlineCode",{parentName:"li"},"kMyConst"),").")),(0,i.kt)("p",null,"Misc"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"struct")," should be used only when it is a true POD - there are no constructors\nor destructors of any kind. For everything else use ",(0,i.kt)("inlineCode",{parentName:"li"},"class"),"."),(0,i.kt)("li",{parentName:"ul"},"Inlining: Only completely trivial (one line) methods can be defined in the\nclass body. The rest should be declared as ",(0,i.kt)("inlineCode",{parentName:"li"},"inline")," both at the declaration and\nthe definition.")),(0,i.kt)("h3",{id:"small-incremental-changes"},"Small incremental changes"),(0,i.kt)("p",null,"The project is developed using small incremental changes. These changes can be\nsmall bug fixes or minor tweaks. Other times, these changes are small steps\nalong the path to reaching larger stated goals. Long-term development branches\nsuffer from many problems, including the lack of visibility, difficulty of code\nreview, lack of testing of the branch and merge difficulty."),(0,i.kt)("p",null,"Commits that go into the project need to be reviewable. This means that commits\nneed to be relatively small, well documented and self contained."),(0,i.kt)("h3",{id:"add-tests"},"Add tests"),(0,i.kt)("p",null,"Functional changes to the compiler need to include a testcase. Unit tests and\nregression tests are critical to the qualification of the compiler. Every bug\nfix needs to include a testcase."),(0,i.kt)("p",null,"Reduce test cases as much as possible! It is unacceptable to commit big programs\nbecause they do not describe the essence of the failure, they are fragile, and\nthey slow testing down. Tests need to be short and focused."),(0,i.kt)("h3",{id:"format-your-code"},"Format your code"),(0,i.kt)("p",null,"clang-format is required to enforce code style and formatting.\nCommits that only change the formatting of code should go in independent of\nfunctional changes."),(0,i.kt)("h3",{id:"commit-messages"},"Commit messages"),(0,i.kt)("p",null,"Here are some guidelines about the format of the commit message:"),(0,i.kt)("p",null,"Separate the commit message into a single-line title and a separate body that\ndescribes the change. Make the title short (80 chars) and readable.  In changes\nthat are restricted to a specific part of the code, include a ","[tag]"," at the start\nof the line in square brackets\u2014for example, \u201c","[docs]"," ... \u201d."),(0,i.kt)("p",null,"If the commit fixes an issue in the bug tracking system, include a link or a\ntask number."),(0,i.kt)("p",null,"When reverting a change make sure to add a short note that describes why the\npatch is being reverted."),(0,i.kt)("h3",{id:"code-review"},"Code review"),(0,i.kt)("p",null,"The project relies heavily on code review to maintain the software quality."),(0,i.kt)("p",null,"Review other people\u2019s changes! Anybody is allowed to review code and comment\non patches."),(0,i.kt)("p",null,"All changes, by all developers, must be reviewed before they are committed to\nthe repository. Smaller changes (if the developer is the de-facto owner of the\ncode base) can be reviewed after being committed."))}p.isMDXComponent=!0}}]);