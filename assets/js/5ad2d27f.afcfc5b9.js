"use strict";(self.webpackChunkhermes_website=self.webpackChunkhermes_website||[]).push([[242],{3905:function(e,t,r){r.d(t,{Zo:function(){return s},kt:function(){return f}});var n=r(7294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function p(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},s=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),u=c(r),m=i,f=u["".concat(l,".").concat(m)]||u[m]||d[m]||o;return r?n.createElement(f,a(a({ref:t},s),{},{components:r})):n.createElement(f,a({ref:t},s))}));function f(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=r.length,a=new Array(o);a[0]=m;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p[u]="string"==typeof e?e:i,a[1]=p;for(var c=2;c<o;c++)a[c]=r[c];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},860:function(e,t,r){r.r(t),r.d(t,{assets:function(){return s},contentTitle:function(){return l},default:function(){return f},frontMatter:function(){return p},metadata:function(){return c},toc:function(){return u}});var n=r(3117),i=r(102),o=(r(7294),r(3905)),a=["components"],p={id:"regexp",title:"RegExp"},l=void 0,c={unversionedId:"regexp",id:"regexp",title:"RegExp",description:"RegExp",source:"@site/../doc/RegExp.md",sourceDirName:".",slug:"/regexp",permalink:"/docs/regexp",draft:!1,editUrl:"https://github.com/facebook/hermes/blob/HEAD/website/../doc/RegExp.md",tags:[],version:"current",lastUpdatedAt:1668454233,formattedLastUpdatedAt:"Nov 14, 2022",frontMatter:{id:"regexp",title:"RegExp"},sidebar:"docs",previous:{title:"Strings",permalink:"/docs/strings"},next:{title:"React Native Integration",permalink:"/docs/react-native-integration"}},s={},u=[{value:"RegExp",id:"regexp",level:2},{value:"Supported Syntax",id:"supported-syntax",level:2}],d={toc:u},m="wrapper";function f(e){var t=e.components,r=(0,i.Z)(e,a);return(0,o.kt)(m,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"regexp"},"RegExp"),(0,o.kt)("p",null,"The Hermes regexp engine is a traditional engine using a backtracking stack. It compiles a regexp into bytecode which can be executed efficiently. For regexp literals like ",(0,o.kt)("inlineCode",{parentName:"p"},"/abc/"),", this occurs at compile time: the regexp bytecode is embedded into the Hermes bytecode file. Note regexp bytecode is distinct from Hermes bytescode."),(0,o.kt)("p",null,"The regexp engine proceeds as follows:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("em",{parentName:"li"},"Parse phase.")," The regexp parser emits a tree of nodes, effectively an IR."),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("em",{parentName:"li"},"Optimization phase.")," The node tree is traversed and optimized in various ways."),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("em",{parentName:"li"},"Emitting phase.")," The node tree is traversed and emits regexp bytecode."),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("em",{parentName:"li"},"Execution phase.")," The bytecode is executed against an input string.")),(0,o.kt)("h2",{id:"supported-syntax"},"Supported Syntax"),(0,o.kt)("p",null,"As of this writing, Hermes regexp supports"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"All of ES6, including global, case-insensitive, multiline, sticky, and Unicode (and legacy)."),(0,o.kt)("li",{parentName:"ol"},"ES9 lookbehinds."),(0,o.kt)("li",{parentName:"ol"},"Named capture groups.")),(0,o.kt)("p",null,"Missing features from ES9 include:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Unicode property escapes.")))}f.isMDXComponent=!0}}]);